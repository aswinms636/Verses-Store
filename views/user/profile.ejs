<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Profile</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    .profile-img {
      width: 150px;
      height: 150px;
      object-fit: cover;
      border-radius: 50%;
      border: 3px solid #f8f9fa;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    .info-item {
      padding: 12px 0;
      border-bottom: 1px solid #eee;
    }
    .info-item:last-child {
      border-bottom: none;
    }
    .edit-btn {
      font-size: 0.9rem;
    }
    .account-actions {
      border-top: 1px solid #eee;
      padding-top: 20px;
      margin-top: 10px;
    }
    .email-badge {
      font-size: 0.75rem;
      vertical-align: middle;
      margin-left: 5px;
    }
    .profile-photo-actions {
        opacity: 0;
        transition: opacity 0.3s;
    }

    .profile-img:hover + .profile-photo-actions,
    .profile-photo-actions:hover {
        opacity: 1;
    }

    .profile-img {
        transition: filter 0.3s;
    }

    .profile-img:hover {
        filter: brightness(0.8);
    }
  </style>
</head>
<body>
  <%- include('../../views/partials/user/sidebar') %>

  <!-- Main Content -->
  <div class="col-md-9 col-lg-10 p-4">
    <div class="container">
      <!-- Profile Header -->
      <div class="profile-header mb-4 d-flex flex-column flex-md-row align-items-center">
        <div class="me-md-4 mb-3 mb-md-0 text-center">
          <div class="position-relative">
              <img src="/uploads/profile-photos/<%= user.profilePhoto || 'download.jpg' %>" 
                   alt="Profile Picture" 
                   class="profile-img" 
                   id="profile-image">
              
              <div class="profile-photo-actions position-absolute bottom-0 start-50 translate-middle-x mb-2">
                  <label for="profile-photo-upload" class="btn btn-sm btn-light me-2">
                      <i class="fas fa-camera"></i>
                  </label>
                  <% if (user.profilePhoto && user.profilePhoto !== 'default-profile.jpg') { %>
                      <button class="btn btn-sm btn-danger" id="remove-photo-btn">
                          <i class="fas fa-trash"></i>
                      </button>
                  <% } %>
              </div>
          </div>
          <input type="file" 
                 id="profile-photo-upload" 
                 accept="image/*" 
                 style="display: none;">
        </div>
        <div class="d-flex flex-column">
          <h2 id="display-name"><%= user.name || "Not provided" %></h2>
          <div class="mb-2">
            
          </div>
          <button id="edit-profile-btn" class="btn btn-primary edit-btn align-self-start">
            <i class="fas fa-edit me-2"></i> Edit Profile
          </button>
        </div>
      </div>

      <!-- Profile Info -->
      <div class="profile-info mb-4">
        <h4 class="p-3 bg-light rounded">Personal Information</h4>
        <div id="info-display" class="p-3">
          <div class="info-item d-flex align-items-center">
            <i class="fas fa-envelope text-primary me-3 fa-fw"></i>
            <div>
              <small class="text-muted d-block">Email</small>
              <div id="display-email"><%= user.email || "Not provided" %></div>
            </div>
          </div>
          <div class="info-item d-flex align-items-center">
            <i class="fas fa-phone text-primary me-3 fa-fw"></i>
            <div>
              <small class="text-muted d-block">Phone</small>
              <div id="display-phone"><%= user.phone || "Not provided" %></div>
            </div>
          </div>
          
          <div class="account-actions mt-4">
            <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#changePasswordModal">
              <i class="fas fa-key me-2"></i> Change Password
            </button>
          </div>
        </div>

        <!-- Edit Form (Hidden by default) -->
        <form id="edit-form" class="p-3 border-top" style="display: none;">
          <div class="mb-3">
            <label for="name" class="form-label">Full Name</label>
            <input type="text" class="form-control" id="name" name="name" value="<%= user.name %>">
          </div>
          <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email" name="email" value="<%= user.email %>">
          </div>
          <div class="mb-3">
            <label for="phone" class="form-label">Phone</label>
            <input type="tel" class="form-control" id="phone" name="phone" value="<%= user.phone %>">
          </div>
          
          <div class="d-flex gap-2">
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <button type="button" id="cancel-edit" class="btn btn-outline-secondary">Cancel</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Change Password Modal -->
  <div class="modal fade" id="changePasswordModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Change Password</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        
        <div class="modal-body">
          <form id="change-password-form">
            <div class="mb-3">
              <label for="current-password" class="form-label">Current Password</label>
              <div class="input-group">
                <input type="password" class="form-control" id="current-password" required>
                <button type="button" class="btn btn-outline-secondary toggle-password">
                  <i class="fas fa-eye"></i>
                </button>
              </div>
            </div>

            <div class="mb-3">
              <label for="new-password" class="form-label">New Password</label>
              <div class="input-group">
                <input type="password" class="form-control" id="new-password" required>
                <button type="button" class="btn btn-outline-secondary toggle-password">
                  <i class="fas fa-eye"></i>
                </button>
              </div>
              <div class="password-requirements mt-2">
                <div id="length-check" class="text-muted">
                  <i class="fas fa-circle"></i> At least 8 characters
                </div>
                <div id="uppercase-check" class="text-muted">
                  <i class="fas fa-circle"></i> One uppercase letter
                </div>
                <div id="lowercase-check" class="text-muted">
                  <i class="fas fa-circle"></i> One lowercase letter
                </div>
                <div id="number-check" class="text-muted">
                  <i class="fas fa-circle"></i> One number
                </div>
                <div id="special-check" class="text-muted">
                  <i class="fas fa-circle"></i> One special character
                </div>
              </div>
            </div>
            
            <div class="mb-3">
              <label for="confirm-password" class="form-label">Confirm Password</label>
              <div class="input-group">
                <input type="password" class="form-control" id="confirm-password" required>
                <button type="button" class="btn btn-outline-secondary toggle-password">
                  <i class="fas fa-eye"></i>
                </button>
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="save-password">Change Password</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Email Verification Modal -->
  <div class="modal fade" id="verifyEmailModal" tabindex="-1" aria-labelledby="verifyEmailModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="verifyEmailModalLabel">Verify Your Email</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>We've sent a verification code to your email: <strong id="verification-email"><%= user.email %></strong></p>
          <form id="verify-email-form">
            <div class="mb-3">
              <label for="verification-code" class="form-label">Enter Verification Code</label>
              <input type="text" class="form-control" id="verification-code" required>
            </div>
          </form>
          <p class="text-muted small">
            Didn't receive the code? 
            <button id="resend-code" class="btn btn-link p-0 align-baseline">Resend code</button>
          </p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="submit-verification">Verify</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap & JavaScript -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Get elements
      const editBtn = document.getElementById('edit-profile-btn');
      const cancelBtn = document.getElementById('cancel-edit');
      const infoDisplay = document.getElementById('info-display');
      const editForm = document.getElementById('edit-form');
      const form = document.getElementById('edit-form');
      const verifyEmailBtn = document.getElementById('verify-email-btn');
      const changePasswordForm = document.getElementById('change-password-form');
      const savePasswordBtn = document.getElementById('save-password');
      const submitVerificationBtn = document.getElementById('submit-verification');
      const resendCodeBtn = document.getElementById('resend-code');

      // Password validation variables
      const currentPasswordInput = document.getElementById('current-password');
      const newPasswordInput = document.getElementById('new-password');
      const confirmPasswordInput = document.getElementById('confirm-password');
      const lengthCheck = document.getElementById('length-check');
      const uppercaseCheck = document.getElementById('uppercase-check');
      const lowercaseCheck = document.getElementById('lowercase-check');
      const numberCheck = document.getElementById('number-check');
      const specialCheck = document.getElementById('special-check');

      // Password validation function
      function validatePassword(password) {
          const requirements = {
              length: password.length >= 8,
              uppercase: /[A-Z]/.test(password),
              lowercase: /[a-z]/.test(password),
              number: /[0-9]/.test(password),
              special: /[@$!%*?&]/.test(password)
          };

          // Update UI indicators
          document.getElementById('length-check').className = 
              requirements.length ? 'text-success' : 'text-muted';
          document.getElementById('uppercase-check').className = 
              requirements.uppercase ? 'text-success' : 'text-muted';
          document.getElementById('lowercase-check').className = 
              requirements.lowercase ? 'text-success' : 'text-muted';
          document.getElementById('number-check').className = 
              requirements.number ? 'text-success' : 'text-muted';
          document.getElementById('special-check').className = 
              requirements.special ? 'text-success' : 'text-muted';

          return Object.values(requirements).every(req => req);
      }

      // Live password validation
      document.getElementById('new-password').addEventListener('input', function() {
        validatePassword(this.value);
      });

      // Toggle password visibility
      document.querySelectorAll('.toggle-password').forEach(button => {
        button.addEventListener('click', function() {
            const input = this.previousElementSibling;
            const icon = this.querySelector('i');
            
            if (input.type === 'password') {
                input.type = 'text';
                icon.className = 'fas fa-eye-slash';
            } else {
                input.type = 'password';
                icon.className = 'fas fa-eye';
            }
        });
      });

      // Handle password change submission
      document.getElementById('save-password').addEventListener('click', async function() {
          const currentPassword = document.getElementById('current-password').value;
          const newPassword = document.getElementById('new-password').value;
          const confirmPassword = document.getElementById('confirm-password').value;

          try {
              // Client-side validation
              if (!currentPassword || !newPassword || !confirmPassword) {
                  Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: 'Please fill in all password fields'
                  });
                  return;
              }

              // Password requirements validation
              const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
              if (!passwordRegex.test(newPassword)) {
                  Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: 'Please ensure your new password meets all requirements'
                  });
                  return;
              }

              if (newPassword !== confirmPassword) {
                  Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: 'New passwords do not match'
                  });
                  return;
              }

              // Check if new password is same as current password
              if (currentPassword === newPassword) {
                  Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: 'New password must be different from current password'
                  });
                  return;
              }

              // Show loading state
              Swal.fire({
                  title: 'Changing Password...',
                  text: 'Please wait while we update your password',
                  allowOutsideClick: false,
                  allowEscapeKey: false,
                  didOpen: () => {
                      Swal.showLoading();
                  }
              });

              const response = await fetch('/change-password', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                      currentPassword,
                      newPassword,
                      confirmPassword
                  })
              });

              const data = await response.json();
              if (data.success) {
                  const modal = bootstrap.Modal.getInstance(document.getElementById('changePasswordModal'));
                  modal.hide();
                  
                  // Clear form fields
                  document.getElementById('current-password').value = '';
                  document.getElementById('new-password').value = '';
                  document.getElementById('confirm-password').value = '';
                  
                  // Reset password requirement indicators
                  document.querySelectorAll('.password-requirements div').forEach(div => {
                      div.className = 'text-muted';
                  });
                  
                  Swal.fire({
                      icon: 'success',
                      title: 'Success',
                      text: 'Password changed successfully'
                  });
              } else {
                  Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: data.message || 'Failed to change password'
                  });
              }
          } catch (error) {
              console.error(error);
              Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: 'An error occurred while changing password'
              });
          }
      });

      // Clear form when modal is closed
      const changePasswordModal = document.getElementById('changePasswordModal');
      changePasswordModal.addEventListener('hidden.bs.modal', function() {
        document.getElementById('current-password').value = '';
        document.getElementById('new-password').value = '';
        document.getElementById('confirm-password').value = '';
        
        // Reset password requirement indicators
        document.querySelectorAll('.password-requirements div').forEach(div => {
            div.className = 'text-muted';
        });
      });

      const profilePhotoUpload = document.getElementById('profile-photo-upload');
      const removePhotoBtn = document.getElementById('remove-photo-btn');
      const profileImage = document.getElementById('profile-image');

      profilePhotoUpload.addEventListener('change', async function(e) {
          if (!e.target.files.length) return;

          // Show loading alert
          Swal.fire({
              title: 'Uploading...',
              text: 'Please wait while we upload your photo',
              allowOutsideClick: false,
              allowEscapeKey: false,
              didOpen: () => {
                  Swal.showLoading();
              }
          });

          const file = e.target.files[0];
          
          // Validate file size (5MB limit)
          if (file.size > 5 * 1024 * 1024) {
              Swal.fire({
                  icon: 'error',
                  title: 'File Too Large',
                  text: 'Please select an image under 5MB'
              });
              return;
          }

          // Validate file type
          const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
          if (!validTypes.includes(file.type)) {
              Swal.fire({
                  icon: 'error',
                  title: 'Invalid File Type',
                  text: 'Please select a JPEG, JPG, PNG, or WEBP image'
              });
              return;
          }

          const formData = new FormData();
          formData.append('profilePhoto', file);

          try {
              const response = await fetch('/upload-profile-photo', {
                  method: 'POST',
                  body: formData
              });

              const data = await response.json();
              if (data.success) {
                  profileImage.src = data.photoUrl;
                  Swal.fire({
                      icon: 'success',
                      title: 'Success!',
                      text: 'Profile photo updated successfully',
                      showConfirmButton: false,
                      timer: 1500
                  }).then(() => {
                      location.reload(); // Reload to show remove button
                  });
              } else {
                  Swal.fire({
                      icon: 'error',
                      title: 'Upload Failed',
                      text: data.message || 'Failed to upload profile photo'
                  });
              }
          } catch (error) {
              console.error('Error:', error);
              Swal.fire({
                  icon: 'error',
                  title: 'Upload Failed',
                  text: 'An error occurred while uploading the photo'
              });
          }
      });

      if (removePhotoBtn) {
          removePhotoBtn.addEventListener('click', async function() {
              try {
                  // Show confirmation dialog
                  const result = await Swal.fire({
                      title: 'Remove Profile Photo?',
                      text: 'This action cannot be undone.',
                      icon: 'warning',
                      showCancelButton: true,
                      confirmButtonColor: '#dc3545',
                      cancelButtonColor: '#6c757d',
                      confirmButtonText: 'Yes, remove it',
                      cancelButtonText: 'Cancel',
                      reverseButtons: true
                  });

                  if (result.isConfirmed) {
                      // Show loading state
                      Swal.fire({
                          title: 'Removing...',
                          text: 'Please wait while we remove your photo',
                          allowOutsideClick: false,
                          allowEscapeKey: false,
                          showConfirmButton: false,
                          didOpen: () => {
                              Swal.showLoading();
                          }
                      });

                      const response = await fetch('/remove-profile-photo', {
                          method: 'POST',
                          headers: {
                              'Content-Type': 'application/json'
                          }
                      });

                      const data = await response.json();
                      if (data.success) {
                          // Success notification
                          await Swal.fire({
                              icon: 'success',
                              title: 'Photo Removed!',
                              text: 'Your profile photo has been removed successfully',
                              showConfirmButton: false,
                              timer: 1500
                          });
                          
                          // Update UI and reload page
                          profileImage.src = data.photoUrl;
                          location.reload();
                      } else {
                          // Error notification
                          Swal.fire({
                              icon: 'error',
                              title: 'Removal Failed',
                              text: data.message || 'Failed to remove profile photo',
                              confirmButtonColor: '#3085d6'
                          });
                      }
                  }
              } catch (error) {
                  console.error('Error:', error);
                  // Network/unexpected error notification
                  Swal.fire({
                      icon: 'error',
                      title: 'Oops...',
                      text: 'An unexpected error occurred while removing the photo',
                      confirmButtonColor: '#3085d6'
                  });
              }
          });
      }

      // Get elements
      editBtn.addEventListener('click', function() {
          infoDisplay.style.display = 'none';
          editForm.style.display = 'block';
      });

      cancelBtn.addEventListener('click', function() {
          editForm.style.display = 'none';
          infoDisplay.style.display = 'block';
      });

      form.addEventListener('submit', async function(e) {
          e.preventDefault();

          const formData = {
              name: document.getElementById('name').value,
              email: document.getElementById('email').value,
              phone: document.getElementById('phone').value
          };

          try {
              const response = await fetch('/edit-profile', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(formData)
              });

              const data = await response.json();
              
              if (data.success) {
                  // Update display values
                  document.getElementById('display-name').textContent = data.user.name || 'Not provided';
                  document.getElementById('display-email').textContent = data.user.email || 'Not provided';
                  document.getElementById('display-phone').textContent = data.user.phone || 'Not provided';
                  
                  // Hide form and show display
                  editForm.style.display = 'none';
                  infoDisplay.style.display = 'block';
                  
                  Swal.fire({
                      icon: 'success',
                      title: 'Success!',
                      text: data.message,
                      showConfirmButton: false,
                      timer: 1500
                  });
              } else {
                  Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: data.message
                  });
              }
          } catch (error) {
              console.error('Error:', error);
              Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: 'Failed to update profile'
              });
          }
      });
    });
  </script>
</body>
</html>