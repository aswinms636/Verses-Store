<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f9f9f9;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            padding: 40px;
        }

        .container {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 30px;
            width: 100%;
            max-width: 1400px;
        }

        .card {
            background: #ffffff;
            padding: 25px 30px;
            border-radius: 12px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            transition: 0.3s ease;
        }

        .card:hover {
            box-shadow: 0 12px 25px rgba(0, 0, 0, 0.15);
            transform: translateY(-3px);
        }

        h2 {
            margin-bottom: 20px;
            font-size: 1.8rem;
            color: #222;
            text-align: left;
        }

        .cart-item {
            display: flex;
            gap: 15px;
            background: #f5f5f5;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 15px;
            align-items: center;
            transition: 0.2s ease;
        }

        .cart-item:hover {
            background: #ececec;
        }

        .cart-item img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 6px;
        }

        .cart-item div {
            flex: 1;
        }

        .cart-item p {
            margin-bottom: 5px;
            font-size: 0.95rem;
            color: #333;
        }

        .cart-item p strong {
            font-weight: 600;
            color: #111;
        }

        select.dropdown {
            width: 100%;
            padding: 12px 10px;
            margin-bottom: 15px;
            border-radius: 8px;
            border: 1px solid #ccc;
            background: #fff;
            font-size: 1rem;
            outline: none;
            transition: 0.3s;
        }

        select.dropdown:focus {
            border-color: #ff6b6b;
        }

        .button {
            width: 100%;
            padding: 14px;
            border-radius: 8px;
            border: none;
            font-size: 1rem;
            cursor: pointer;
            background: linear-gradient(90deg, #ff6b6b, #ff4d4d);
            color: #fff;
            font-weight: bold;
            margin-bottom: 10px;
            transition: 0.3s ease;
        }

        .button:hover {
            background: linear-gradient(90deg, #ff4d4d, #e63946);
        }

        .order-summary p {
            margin-bottom: 15px;
            font-size: 1rem;
            color: #444;
        }

        .order-summary label {
            font-weight: bold;
            display: block;
            margin-bottom: 8px;
            color: #333;
        }

        .total-amount {
            font-size: 1.3rem;
            color: #000;
            font-weight: bold;
            margin-bottom: 20px;
        }

        @media (max-width: 1024px) {
            .container {
                grid-template-columns: 1fr;
            }
        }

        .error-message {
            color: #dc3545;
            font-size: 0.8rem;
            margin-top: 2px;
            display: block;
            min-height: 16px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-control.error {
            border-color: #dc3545;
        }

        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 15px;
            width: 800px;
            max-width: 95%;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
        }

        .form-container {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            border-color: #ff4757;
            box-shadow: 0 0 0 2px rgba(255, 71, 87, 0.1);
            outline: none;
        }

        .button-group {
            grid-column: 1 / -1;
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        .save-btn {
            flex: 1;
            padding: 12px 25px;
            background: linear-gradient(45deg, #ff4757, #ff6b6b);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 15px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .save-btn:hover {
            background: linear-gradient(45deg, #ff6b6b, #ff4757);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 71, 87, 0.3);
        }

        .cancel-btn {
            flex: 1;
            padding: 12px 25px;
            background: #f1f2f6;
            color: #2f3542;
            border: none;
            border-radius: 8px;
            font-size: 15px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .cancel-btn:hover {
            background: #dfe4ea;
            transform: translateY(-2px);
        }

        .modal-header {
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f1f2f6;
        }

        .modal-header h2 {
            color: #2f3542;
            font-size: 1.8rem;
            margin: 0;
        }

        @media (max-width: 768px) {
            .form-container {
                grid-template-columns: 1fr;
            }

            .modal-content {
                padding: 20px;
                width: 95%;
            }
        }
    </style>
</head>

<body>
    <div class="container">

        <!-- Left Section (Cart Items & Shipping Address) -->
        <div class="left-section">

            <!-- Cart Items -->
            <div class="card">
                <h2>Cart Items</h2>
                <% cartItems.forEach(item => { %>
                <div class="cart-item">
                    <img src="/Uploads/product-Images/<%= item.image %>" alt="Product">
                    <div>
                        <p><strong><%= item.productName %></strong></p>
                        <p>Size: <%= item.size %></p>
                        <p>Qty: <%= item.quantity %></p>
                        <p><strong>â‚¹<%= (item.quantity * item.price).toFixed(2) %></strong></p>
                    </div>
                </div>
                <% }) %>
            </div>

            <!-- Shipping Address -->
            <div class="card">
                <h2>Shipping Address</h2>
                <select id="addressSelect" class="dropdown">
                    <% if (userAddresses && userAddresses.length > 0) { %>
                        <% userAddresses.forEach(address => { %>
                            <option value="<%= address._id %>">
                                <%= address.fullname %>, <%= address.street %>, <%= address.city %>, <%= address.state %> - <%= address.zipCode %>
                            </option>
                        <% }) %>
                    <% } else { %>
                        <option disabled selected>No saved addresses. Add one below.</option>
                    <% } %>
                </select>

                <button class="button" onclick="openAddAddressModal()">Add Address</button>
                <button class="button" onclick="editAddress()">Edit Address</button>

                <!-- Address Modal -->
                <div id="addressModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); justify-content:center; align-items:center;">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h2>Add New Address</h2>
                        </div>
                        <form id="addAddressForm">
                            <div class="form-container">
                                <div class="form-group">
                                    <input type="text" id="fullname" placeholder="Full Name" class="form-control">
                                    <span id="fullname-error" class="error-message"></span>
                                </div>

                                <div class="form-group">
                                    <input type="text" id="phone" placeholder="Phone Number" class="form-control">
                                    <span id="phone-error" class="error-message"></span>
                                </div>

                                <div class="form-group">
                                    <input type="text" id="street" placeholder="Street Address" class="form-control">
                                    <span id="street-error" class="error-message"></span>
                                </div>

                                <div class="form-group">
                                    <input type="text" id="city" placeholder="City" class="form-control">
                                    <span id="city-error" class="error-message"></span>
                                </div>

                                <div class="form-group">
                                    <input type="text" id="landmark" placeholder="Landmark (Optional)" class="form-control">
                                    <span id="landmark-error" class="error-message"></span>
                                </div>

                                <div class="form-group">
                                    <input type="text" id="state" placeholder="State" class="form-control">
                                    <span id="state-error" class="error-message"></span>
                                </div>

                                <div class="form-group">
                                    <input type="text" id="zipCode" placeholder="ZIP Code" class="form-control">
                                    <span id="zipCode-error" class="error-message"></span>
                                </div>

                                <div class="button-group">
                                    <button type="button" class="cancel-btn" onclick="closeAddAddressModal()">Cancel</button>
                                    <button type="button" class="save-btn" id="saveAddressBtn">Save Address</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

            </div>

        </div>

        <!-- Right Section (Order Summary) -->
        <div class="right-section">
            <div class="card order-summary">
                <h2>Order Summary</h2>
                <p class="total-amount">Total: â‚¹<%= (totalAmount + 5).toFixed(2) %></p>

                <label>Payment Method:</label>
                <select id="paymentMethod" class="dropdown">
                    <option value="Cash on Delivery">Cash on Delivery</option>
                    <option value="Online Payment">Online Payment</option>
                </select>

                <button class="button" onclick="placeOrder()">Place Order</button>
            </div>
        </div>

    </div>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function openAddAddressModal() {
            document.getElementById("addressModal").style.display = "flex";
        }

        function closeAddAddressModal() {
            document.getElementById("addressModal").style.display = "none";
        }

        function updateDropdown(addresses) {
            const select = document.getElementById("addressSelect");
            select.innerHTML = "";
            addresses.forEach(address => {
                const option = document.createElement("option");
                option.value = address._id;
                option.innerText = `${address.fullname}, ${address.street}, ${address.city}, ${address.state} - ${address.zipCode}`;
                select.appendChild(option);
            });
            select.selectedIndex = 0;
        }

        async function placeOrder() {
            const addressId = document.getElementById("addressSelect").value;
            const paymentMethod = document.getElementById("paymentMethod").value;

            if (!addressId) {
                return Swal.fire("Error", "Please select an address", "error");
            }

            if (paymentMethod === "Online Payment") {
                // Handle Razorpay payment
                await handleRazorpayPayment(addressId);
            } else {
                // Existing COD logic
                const response = await fetch("/place", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ addressId, paymentMethod })
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire("Order Placed!", "Your order has been placed successfully", "success")
                        .then(() => location.href = `/order/view/${data.orderId}`);
                } else {
                    Swal.fire("Error", "Order placement failed", "error");
                }
            }
        }

        async function handleRazorpayPayment(addressId) {
            try {
                // First create an order on your backend
                const response = await fetch("/create-order", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        addressId,
                        paymentMethod: "Online Payment",
                        totalAmount: parseFloat("<%= totalAmount %>")
                    })
                });

                const data = await response.json();
                console.log(data);


                if (!data.success) {
                    console.error("Order creation failed:", data.message);
                    return Swal.fire("Error", "Failed to create order", "error");
                }

                

                // Razorpay options
                const options = {
                    key: data.key, // Make sure this is passed from your backend
                    amount: data.amount,
                    currency: data.currency || "INR",
                    order_id: data.orderId,
                    name: "Verses Store",
                    description: "Order Payment",
                    handler: async function(response) {
                        // Payment successful, verify payment
                        const verifyResponse = await fetch("/verify-payment", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_signature: response.razorpay_signature,
                                dbOrderId: data.dbOrderId // Include dbOrderId in the verification request
                            })
                        });

                        const verifyData = await verifyResponse.json();

                        console.log( 'verifyyyyyyyyyyyy',verifyData);

                        if (verifyData.success) {
                            Swal.fire("Success!", verifyData.message || "Payment successful and order placed!", "success")
                                .then(() => {
                                    window.location.href = `/order/view/${verifyData.orderId}`;
                                });
                        } else {
                            Swal.fire("Error", verifyData.message || "Payment verification failed", "error");
                        }
                    },
                    theme: {
                        color: "#3399cc"
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();

            } catch (error) {
                console.error("Payment error:", error);
                Swal.fire("Error", "Payment processing failed", "error");
            }
        }

        document.getElementById('saveAddressBtn').addEventListener('click', async (e) => {
            e.preventDefault();

            // Reset previous error messages
            clearErrors();

            // Get form values
            const formData = {
                fullname: document.getElementById('fullname').value.trim(),
                street: document.getElementById('street').value.trim(),
                phone: document.getElementById('phone').value.trim(),
                city: document.getElementById('city').value.trim(),
                landmark: document.getElementById('landmark').value.trim(),
                state: document.getElementById('state').value.trim(),
                zipCode: document.getElementById('zipCode').value.trim()
            };

            // Client-side validation
            let hasErrors = false;

            if (!formData.fullname) {
                showError('fullname', 'Full name is required');
                hasErrors = true;
            }

            if (!formData.phone) {
                showError('phone', 'Phone number is required');
                hasErrors = true;
            } else if (!/^\d{10}$/.test(formData.phone)) {
                showError('phone', 'Please enter a valid 10-digit phone number');
                hasErrors = true;
            }

            if (!formData.street) {
                showError('street', 'Street address is required');
                hasErrors = true;
            }

            if (!formData.city) {
                showError('city', 'City is required');
                hasErrors = true;
            }

            if (!formData.state) {
                showError('state', 'State is required');
                hasErrors = true;
            }

            if (!formData.zipCode) {
                showError('zipCode', 'ZIP code is required');
                hasErrors = true;
            } else if (!/^\d{6}$/.test(formData.zipCode)) {
                showError('zipCode', 'Please enter a valid 6-digit ZIP code');
                hasErrors = true;
            }

            if (hasErrors) {
                return;
            }

            try {
                const response = await fetch('/address/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Address saved successfully'
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    // Handle server-side validation errors
                    if (data.errors) {
                        Object.keys(data.errors).forEach(field => {
                            showError(field, data.errors[field]);
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: data.message || 'Failed to save address'
                        });
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'An error occurred while saving the address'
                });
            }
        });

        function showError(fieldId, message) {
            const errorSpan = document.getElementById(`${fieldId}-error`);
            const inputField = document.getElementById(fieldId);
            if (errorSpan) {
                errorSpan.textContent = message;
            }
            if (inputField) {
                inputField.classList.add('error');
            }
        }

        function clearErrors() {
            const errorMessages = document.getElementsByClassName('error-message');
            const inputs = document.getElementsByClassName('form-control');

            Array.from(errorMessages).forEach(span => span.textContent = '');
            Array.from(inputs).forEach(input => input.classList.remove('error'));
        }
    </script>
</body>

</html>
