<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f9f9f9;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            padding: 40px;
        }

        .container {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 30px;
            width: 100%;
            max-width: 1400px;
        }

        .card {
            background: #ffffff;
            padding: 25px 30px;
            border-radius: 12px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            transition: 0.3s ease;
        }

        .card:hover {
            box-shadow: 0 12px 25px rgba(0, 0, 0, 0.15);
            transform: translateY(-3px);
        }

        h2 {
            margin-bottom: 20px;
            font-size: 1.8rem;
            color: #222;
            text-align: left;
        }

        .cart-item {
            display: flex;
            gap: 15px;
            background: #f5f5f5;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 15px;
            align-items: center;
            transition: 0.2s ease;
        }

        .cart-item:hover {
            background: #ececec;
        }

        .cart-item img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 6px;
        }

        .cart-item div {
            flex: 1;
        }

        .cart-item p {
            margin-bottom: 5px;
            font-size: 0.95rem;
            color: #333;
        }

        .cart-item p strong {
            font-weight: 600;
            color: #111;
        }

        select.dropdown {
            width: 100%;
            padding: 12px 10px;
            margin-bottom: 15px;
            border-radius: 8px;
            border: 1px solid #ccc;
            background: #fff;
            font-size: 1rem;
            outline: none;
            transition: 0.3s;
        }

        select.dropdown:focus {
            border-color: #ff6b6b;
        }

        .button {
            width: 100%;
            padding: 14px;
            border-radius: 8px;
            border: none;
            font-size: 1rem;
            cursor: pointer;
            background: linear-gradient(90deg, #ff6b6b, #ff4d4d);
            color: #fff;
            font-weight: bold;
            margin-bottom: 10px;
            transition: 0.3s ease;
        }

        .button:hover {
            background: linear-gradient(90deg, #ff4d4d, #e63946);
        }

        .order-summary p {
            margin-bottom: 15px;
            font-size: 1rem;
            color: #444;
        }

        .order-summary label {
            font-weight: bold;
            display: block;
            margin-bottom: 8px;
            color: #333;
        }

        .total-amount {
            font-size: 1.3rem;
            color: #000;
            font-weight: bold;
            margin-bottom: 20px;
        }

        @media (max-width: 1024px) {
            .container {
                grid-template-columns: 1fr;
            }
        }

        .error-message {
            color: #dc3545;
            font-size: 0.8rem;
            margin-top: 2px;
            display: block;
            min-height: 16px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-control.error {
            border-color: #dc3545;
        }

        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 15px;
            width: 800px;
            max-width: 95%;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
        }

        .form-container {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            border-color: #ff4757;
            box-shadow: 0 0 0 2px rgba(255, 71, 87, 0.1);
            outline: none;
        }

        .button-group {
            grid-column: 1 / -1;
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        .save-btn {
            flex: 1;
            padding: 12px 25px;
            background: linear-gradient(45deg, #ff4757, #ff6b6b);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 15px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .save-btn:hover {
            background: linear-gradient(45deg, #ff6b6b, #ff4757);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 71, 87, 0.3);
        }

        .cancel-btn {
            flex: 1;
            padding: 12px 25px;
            background: #f1f2f6;
            color: #2f3542;
            border: none;
            border-radius: 8px;
            font-size: 15px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .cancel-btn:hover {
            background: #dfe4ea;
            transform: translateY(-2px);
        }

        .modal-header {
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f1f2f6;
        }

        .modal-header h2 {
            color: #2f3542;
            font-size: 1.8rem;
            margin: 0;
        }

        @media (max-width: 768px) {
            .form-container {
                grid-template-columns: 1fr;
            }

            .modal-content {
                padding: 20px;
                width: 95%;
            }
        }

        .coupon-section {
            margin: 20px 0;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
        }

        .available-coupons {
            margin-top: 15px;
        }

        .coupon-item {
            padding: 10px;
            margin: 5px 0;
            background: #f5f5f5;
            border-radius: 5px;
            cursor: pointer;
        }

        .coupon-item:hover {
            background: #e9e9e9;
        }

        .coupon-buttons {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .remove-coupon {
            background: linear-gradient(90deg, #ff4d4d, #ff0000) !important;
        }

        .price-breakdown {
            margin-top: 15px;
            padding: 10px;
            background: #f5f5f5;
            border-radius: 5px;
        }

        .breakdown-item {
            padding: 8px 0;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
        }

        .breakdown-item.total {
            font-weight: bold;
            font-size: 1.1em;
            border-bottom: none;
            margin-top: 10px;
            padding-top: 10px;
            border-top: 2px solid #ddd;
        }

        .coupon-discount {
            color: #28a745;
        }
    </style>
</head>

<body>
    <div class="container">

        <!-- Left Section (Cart Items & Shipping Address) -->
        <div class="left-section">

            <!-- Cart Items -->
            <div class="card">
                <h2>Cart Items</h2>
                <% cartItems.forEach(item => { %>
                <div class="cart-item">
                    <img src="/Uploads/product-Images/<%= item.image %>" alt="Product">
                    <div>
                        <p><strong><%= item.productName %></strong></p>
                        <p>Size: <%= item.size %></p>
                        <p>Qty: <%= item.quantity %></p>
                        <p><strong>â‚¹<%= (item.quantity * item.price).toFixed(2) %></strong></p>
                    </div>
                </div>
                <% }) %>
            </div>

            <!-- Shipping Address -->
            <div class="card">
                <h2>Shipping Address</h2>
                <!-- Update the address select dropdown -->
                <select id="addressSelect" class="dropdown">
                    <% if (userAddresses && userAddresses.length > 0) { %>
                        <% userAddresses.forEach(address => { %>
                            <option value="<%= address._id.toString() %>">
                                <%= address.fullname %>, <%= address.street %>, <%= address.city %>, <%= address.state %> - <%= address.zipCode %>
                            </option>
                        <% }) %>
                    <% } else { %>
                        <option disabled selected>No saved addresses. Add one below.</option>
                    <% } %>
                </select>

                <button class="button" onclick="openAddAddressModal()">Add Address</button>
                

                <!-- Address Modal -->
                <div id="addressModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); justify-content:center; align-items:center;">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h2>Add New Address</h2>
                        </div>
                        <form id="addAddressForm">
                            <div class="form-container">
                                <div class="form-group">
                                    <input type="text" id="fullname" placeholder="Full Name" class="form-control">
                                    <span id="fullname-error" class="error-message"></span>
                                </div>

                                <div class="form-group">
                                    <input type="text" id="phone" placeholder="Phone Number" class="form-control">
                                    <span id="phone-error" class="error-message"></span>
                                </div>

                                <div class="form-group">
                                    <input type="text" id="street" placeholder="Street Address" class="form-control">
                                    <span id="street-error" class="error-message"></span>
                                </div>

                                <div class="form-group">
                                    <input type="text" id="city" placeholder="City" class="form-control">
                                    <span id="city-error" class="error-message"></span>
                                </div>

                                <div class="form-group">
                                    <input type="text" id="landmark" placeholder="Landmark (Optional)" class="form-control">
                                    <span id="landmark-error" class="error-message"></span>
                                </div>

                                <div class="form-group">
                                    <input type="text" id="state" placeholder="State" class="form-control">
                                    <span id="state-error" class="error-message"></span>
                                </div>

                                <div class="form-group">
                                    <input type="text" id="zipCode" placeholder="ZIP Code" class="form-control">
                                    <span id="zipCode-error" class="error-message"></span>
                                </div>

                                <div class="button-group">
                                    <button type="button" class="cancel-btn" onclick="closeAddAddressModal()">Cancel</button>
                                    <button type="button" class="save-btn" id="saveAddressBtn">Save Address</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

            </div>

        </div>

        <!-- Right Section (Order Summary) -->
        <div class="right-section">
            <div class="card order-summary">
                <h2>Order Summary</h2>
                <p class="total-amount">Total: â‚¹<%= (totalAmount + 5).toFixed(2) %></p>

                <label>Payment Method:</label>
                <select id="paymentMethod" class="dropdown">
                    <option value="Cash on Delivery">Cash on Delivery</option>
                    <option value="Online Payment">Online Payment</option>
                    <option value="Wallet Payment">Wallet Payment</option>
                </select>

                <button class="button" onclick="placeOrder()">Place Order</button>

                <div class="coupon-section">
                    <div class="form-group">
                        <input type="text" id="couponCode" class="form-control" placeholder="Enter Coupon Code">
                        <div class="coupon-buttons">
                            <button class="button" onclick="applyCoupon()">Apply Coupon</button>
                            <button class="button remove-coupon" id="removeCouponBtn" style="display: none;" onclick="removeCoupon()">Remove Coupon</button>
                        </div>
                    </div>
                    <div id="couponDiscount" style="display: none;" class="coupon-discount">
                        Coupon Discount: â‚¹<span id="discountAmount">0</span>
                    </div>
                    <div class="price-breakdown">
                        <div class="breakdown-item">Sub Total: â‚¹<span id="subTotal"><%= totalAmount.toFixed(2) %></span></div>
                        <div class="breakdown-item">Tax (2%): â‚¹<span id="taxAmount">0.00</span></div>
                        <div class="breakdown-item">GST (2%): â‚¹<span id="gstAmount">0.00</span></div>
                        <div class="breakdown-item">Actual Price: â‚¹<span id="actualPrice"><%= totalAmount.toFixed(2) %></span></div>
                        <div id="couponDiscount" style="display: none;" class="breakdown-item coupon-discount">
                            Coupon Discount: â‚¹<span id="discountAmount">0.00</span>
                        </div>
                        <div class="breakdown-item total">Final Amount: â‚¹<span id="payableAmount"><%= totalAmount.toFixed(2) %></span></div>
                    </div>
                    <div id="availableCoupons" class="available-coupons">
                        <h3>Available Coupons</h3>
                        <div id="couponsList"></div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function openAddAddressModal() {
            document.getElementById("addressModal").style.display = "flex";
        }

        function closeAddAddressModal() {
            document.getElementById("addressModal").style.display = "none";
        }

        function updateDropdown(addresses) {
            const select = document.getElementById("addressSelect");
            select.innerHTML = "";
            addresses.forEach(address => {
                const option = document.createElement("option");
                option.value = address._id;
                option.innerText = `${address.fullname}, ${address.street}, ${address.city}, ${address.state} - ${address.zipCode}`;
                select.appendChild(option);
            });
            select.selectedIndex = 0;
        }

        // Replace or update the placeOrder function in your script section

async function placeOrder() {
    try {
        const addressId = document.getElementById("addressSelect").value;
        const paymentMethod = document.getElementById("paymentMethod").value;

        if (!addressId) {
            return Swal.fire("Error", "Please select an address", "error");
        }

        // Get and validate all amounts
        const amounts = validateOrderAmounts();
        if (!amounts) {
            return;
        }

        // Additional validation for Cash on Delivery
        if (paymentMethod === "Cash on Delivery" && amounts.actualPrice < 1000) {
            return Swal.fire("Error", "Minimum order value for Cash on Delivery is â‚¹1000", "error");
        }

        if (paymentMethod === "Online Payment") {
            await handleRazorpayPayment(addressId);
        } else {
            const orderData = {
                addressId, // Make sure this is properly passed
                paymentMethod,
                couponCode: currentCoupon ? currentCoupon.code : null,
                subTotal: amounts.subTotal,
                taxAmount: amounts.taxAmount,
                gstAmount: amounts.gstAmount,
                actualPrice: amounts.actualPrice,
                payableAmount: amounts.finalAmount
            };

            const response = await fetch("/place", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(orderData)
            });

            const data = await response.json();

            if (data.success) {
                await Swal.fire({
                    title: "Success!",
                    text: "Your order has been placed successfully",
                    icon: "success"
                });
                
                const orderId = Array.isArray(data.orders) ? data.orders[0] : data.orders;
                window.location.href = `/order/view/${orderId}`;
            } else {
                Swal.fire("Error", data.message || "Order placement failed", "error");
            }
        }
    } catch (error) {
        console.error("Order placement error:", error);
        Swal.fire("Error", "Failed to place order. Please try again.", "error");
    }
}

        async function handleRazorpayPayment(addressId) {
    try {
        const amounts = validateOrderAmounts();
        if (!amounts) return;

        // Show loading indicator while creating order
        Swal.fire({
            title: 'Processing',
            text: 'Creating your order...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        const response = await fetch("/create-order", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                addressId: addressId, // Ensure addressId is properly passed
                totalAmount: amounts.subTotal,
                actualPrice: amounts.actualPrice,
                payableAmount: amounts.finalAmount,
                taxAmount: amounts.taxAmount,
                gstAmount: amounts.gstAmount,
                subTotal: amounts.subTotal,
                couponCode: currentCoupon ? currentCoupon.code : null
            })
        });

        const data = await response.json();

        // Close loading indicator
        Swal.close();

        if (!data.success) {
            throw new Error(data.message || "Failed to create order");
        }

        // Initialize Razorpay
        const options = {
            key: data.key,
            amount: data.amount,
            currency: "INR",
            name: "Verses Store",
            description: "Order Payment",
            order_id: data.orderId,
            handler: async function(response) {
                try {
                    // Show processing payment message
                    Swal.fire({
                        title: 'Processing',
                        text: 'Verifying payment...',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    const verifyResponse = await fetch("/verify-payment", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_signature: response.razorpay_signature,
                            dbOrderId: data.dbOrderId
                        })
                    });

                    const verifyData = await verifyResponse.json();

                    if (verifyData.success) {
                        await Swal.fire({
                            title: "Success!",
                            text: "Payment successful and order placed!",
                            icon: "success"
                        });
                        window.location.href = `/order/view/${data.dbOrderId}`;
                    } else {
                        throw new Error(verifyData.message || "Payment verification failed");
                    }
                } catch (error) {
                    Swal.fire("Error", error.message, "error");
                }
            },
            prefill: {
                name: document.querySelector('#addressSelect option:checked').textContent.split(',')[0],
                contact: document.querySelector('#addressSelect option:checked').textContent.match(/\d{10}/)?.[0] || ''
            },
            theme: {
                color: "#ff4757"
            }
        };

        const rzp = new Razorpay(options);
        rzp.on('payment.failed', function(response) {
            Swal.fire("Error", "Payment failed! Please try again.", "error");
        });
        rzp.open();

    } catch (error) {
        // Close loading indicator if there's an error
        Swal.close();
        console.error("Payment error:", error);
        Swal.fire("Error", "Payment processing failed", "error");
    }
}

        document.getElementById('saveAddressBtn').addEventListener('click', async (e) => {
            e.preventDefault();

            // Reset previous error messages
            clearErrors();

            // Get form values
            const formData = {
                fullname: document.getElementById('fullname').value.trim(),
                street: document.getElementById('street').value.trim(),
                phone: document.getElementById('phone').value.trim(),
                city: document.getElementById('city').value.trim(),
                landmark: document.getElementById('landmark').value.trim(),
                state: document.getElementById('state').value.trim(),
                zipCode: document.getElementById('zipCode').value.trim()
            };

            // Client-side validation
            let hasErrors = false;

            if (!formData.fullname) {
                showError('fullname', 'Full name is required');
                hasErrors = true;
            }

            if (!formData.phone) {
                showError('phone', 'Phone number is required');
                hasErrors = true;
            } else if (!/^\d{10}$/.test(formData.phone)) {
                showError('phone', 'Please enter a valid 10-digit phone number');
                hasErrors = true;
            }

            if (!formData.street) {
                showError('street', 'Street address is required');
                hasErrors = true;
            }

            if (!formData.city) {
                showError('city', 'City is required');
                hasErrors = true;
            }

            if (!formData.state) {
                showError('state', 'State is required');
                hasErrors = true;
            }

            if (!formData.zipCode) {
                showError('zipCode', 'ZIP code is required');
                hasErrors = true;
            } else if (!/^\d{6}$/.test(formData.zipCode)) {
                showError('zipCode', 'Please enter a valid 6-digit ZIP code');
                hasErrors = true;
            }

            if (hasErrors) {
                return;
            }

            try {
                const response = await fetch('/address/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Address saved successfully'
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    // Handle server-side validation errors
                    if (data.errors) {
                        Object.keys(data.errors).forEach(field => {
                            showError(field, data.errors[field]);
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: data.message || 'Failed to save address'
                        });
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'An error occurred while saving the address'
                });
            }
        });

        function showError(fieldId, message) {
            const errorSpan = document.getElementById(`${fieldId}-error`);
            const inputField = document.getElementById(fieldId);
            if (errorSpan) {
                errorSpan.textContent = message;
            }
            if (inputField) {
                inputField.classList.add('error');
            }
        }

        function clearErrors() {
            const errorMessages = document.getElementsByClassName('error-message');
            const inputs = document.getElementsByClassName('form-control');

            Array.from(errorMessages).forEach(span => span.textContent = '');
            Array.from(inputs).forEach(input => input.classList.remove('error'));
        }

        async function loadAvailableCoupons() {
            try {
                const totalAmount = parseFloat(document.getElementById('actualPrice').textContent);
                const response = await fetch(`/coupons/available/${totalAmount}`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                const data = await response.json();
                
                const couponsDiv = document.getElementById('couponsList');
                couponsDiv.innerHTML = '';

                if (data.success && data.coupons && data.coupons.length > 0) {
                    data.coupons.forEach(coupon => {
                        const couponElement = document.createElement('div');
                        couponElement.className = 'coupon-item';
                        couponElement.innerHTML = `
                            <strong>${coupon.name}</strong><br>
                            Save â‚¹${coupon.offerPrice} on orders above â‚¹${coupon.minimumPrice}<br>
                            Valid till: ${new Date(coupon.expireOn).toLocaleDateString()}
                        `;
                        couponElement.onclick = () => {
                            document.getElementById('couponCode').value = coupon.name;
                            applyCoupon();
                        };
                        couponsDiv.appendChild(couponElement);
                    });
                } else {
                    couponsDiv.innerHTML = '<p>No coupons available</p>';
                }
            } catch (error) {
                console.error('Error loading coupons:', error);
                couponsDiv.innerHTML = '<p>Error loading coupons</p>';
            }
        }

        let currentCoupon = null;

        async function applyCoupon() {
            try {
                const couponCode = document.getElementById('couponCode').value;
                const actualPrice = parseFloat(document.getElementById('actualPrice').textContent);

                if (!couponCode) {
                    return Swal.fire('Error', 'Please enter a coupon code', 'error');
                }

                const response = await fetch('/coupons/apply', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        couponCode,
                        totalAmount: actualPrice
                    })
                });

                const data = await response.json();

                if (data.success) {
                    currentCoupon = data.couponDetails;
                    
                    document.getElementById('discountAmount').textContent = data.discount.toFixed(2);
                    document.getElementById('couponDiscount').style.display = 'block';
                    calculateTotalAmount(); // Recalculate all amounts
                    document.getElementById('removeCouponBtn').style.display = 'block';
                    document.getElementById('couponCode').disabled = true;
                    
                    Swal.fire('Success', data.message, 'success');
                } else {
                    Swal.fire('Error', data.message || 'Failed to apply coupon', 'error');
                }
            } catch (error) {
                console.error('Error applying coupon:', error);
                Swal.fire('Error', 'Failed to apply coupon', 'error');
            }
        }

        async function removeCoupon() {
            try {
                const response = await fetch('/coupons/remove', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        couponCode: currentCoupon.code
                    })
                });

                const data = await response.json();

                if (data.success) {
                    currentCoupon = null;
                    document.getElementById('couponCode').value = '';
                    document.getElementById('couponCode').disabled = false;
                    document.getElementById('couponDiscount').style.display = 'none';
                    document.getElementById('payableAmount').textContent = <%= totalAmount.toFixed(2) %>;
                    document.getElementById('removeCouponBtn').style.display = 'none';
                    
                    Swal.fire('Success', 'Coupon removed successfully', 'success');
                } else {
                    Swal.fire('Error', data.message, 'error');
                }
            } catch (error) {
                console.error('Error removing coupon:', error);
                Swal.fire('Error', 'Failed to remove coupon', 'error');
            }
        }

        // Add this function after the DOMContentLoaded event listener

function calculateTotalAmount() {
    const subTotal = parseFloat(document.getElementById('subTotal').textContent);
    const taxRate = 0.02; // 2%
    const gstRate = 0.02; // 2%

    const taxAmount = subTotal * taxRate;
    const gstAmount = subTotal * gstRate;
    const actualPrice = subTotal + taxAmount + gstAmount;
    
    // Get coupon discount if applied
    const discountElement = document.getElementById('discountAmount');
    const couponDiscount = discountElement && discountElement.parentElement.style.display !== 'none' 
        ? parseFloat(discountElement.textContent) 
        : 0;

    const finalAmount = actualPrice - couponDiscount;

    // Update UI
    document.getElementById('taxAmount').textContent = taxAmount.toFixed(2);
    document.getElementById('gstAmount').textContent = gstAmount.toFixed(2);
    document.getElementById('actualPrice').textContent = actualPrice.toFixed(2);
    document.getElementById('payableAmount').textContent = finalAmount.toFixed(2);

    return {
        subTotal,
        taxAmount,
        gstAmount,
        actualPrice,
        finalAmount
    };
}

// Call calculateTotalAmount on page load
document.addEventListener('DOMContentLoaded', () => {
    calculateTotalAmount();
    loadAvailableCoupons();
});

// Update the validateOrderAmounts function to be more precise
function validateOrderAmounts() {
    const subTotal = parseFloat(document.getElementById('subTotal').textContent);
    const taxAmount = parseFloat(document.getElementById('taxAmount').textContent);
    const gstAmount = parseFloat(document.getElementById('gstAmount').textContent);
    const actualPrice = parseFloat(document.getElementById('actualPrice').textContent);
    const payableAmount = parseFloat(document.getElementById('payableAmount').textContent);

    // More strict validation
    if (isNaN(subTotal) || subTotal <= 0) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid Amount',
            text: 'Cart subtotal must be greater than 0'
        });
        return false;
    }

    // Calculate expected values with precise rounding
    const expectedTax = Math.round((subTotal * 0.02) * 100) / 100;
    const expectedGst = Math.round((subTotal * 0.02) * 100) / 100;
    const expectedActual = Math.round((subTotal + expectedTax + expectedGst) * 100) / 100;

    // Get coupon discount
    const discountElement = document.getElementById('discountAmount');
    const couponDiscount = discountElement && discountElement.parentElement.style.display !== 'none' 
        ? parseFloat(discountElement.textContent) 
        : 0;

    // Calculate final amount
    const expectedFinal = Math.round((expectedActual - couponDiscount) * 100) / 100;

    // Validate calculations with small tolerance for floating-point arithmetic
    const tolerance = 0.01;
    if (Math.abs(taxAmount - expectedTax) > tolerance ||
        Math.abs(gstAmount - expectedGst) > tolerance ||
        Math.abs(actualPrice - expectedActual) > tolerance ||
        Math.abs(payableAmount - expectedFinal) > tolerance) {
        
        Swal.fire({
            icon: 'error',
            title: 'Calculation Error',
            text: 'Please refresh the page and try again'
        });
        return false;
    }

    return {
        subTotal,
        taxAmount,
        gstAmount,
        actualPrice,
        finalAmount: expectedFinal
    };
}

// Modify your order submission event listener
document.getElementById('place-order-btn').addEventListener('click', async function(e) {
    e.preventDefault();

    const amounts = validateOrderAmounts();
    if (!amounts) {
        return;
    }

    // Rest of your order submission code...
    const orderData = {
        addressId: selectedAddressId,
        paymentMethod: selectedPaymentMethod,
        couponCode: currentCoupon?.code || null,
        subTotal: amounts.subTotal,
        taxAmount: amounts.taxAmount,
        gstAmount: amounts.gstAmount,
        actualPrice: amounts.actualPrice,
        payableAmount: amounts.payableAmount
    };

    // Continue with order submission...
});
    </script>
</body>

</html>