<%- include("../../views/partials/admin/header") %>

<style>
  :root {
    --primary-color: #0C6B58;
    --danger-color: #dc3545;
    --success-color: #22c55e;
    --border-color: #E5E7EB;
    --background-color: #F9FAFB;
    --text-color: #374151;
  }

  .content-main {
    padding: 2rem;
    background-color: white;
  }

  .content-title {
    font-size: 1.5rem;
    color: var(--text-color);
    margin-bottom: 2rem;
    font-weight: 500;
  }

  .card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .card-body {
    padding: 1.5rem;
  }

  
  .layout-container {
    display: grid;
    grid-template-columns: 300px 1fr;
    gap: 2rem;
  }

  
  .coupon-form {
    padding: 1rem;
  }

  .form-group {
    margin-bottom: 1.25rem;
  }

  .form-label {
    display: block;
    margin-bottom: 0.5rem;
    color: var(--text-color);
    font-size: 0.875rem;
  }

  .form-control {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    font-size: 0.875rem;
    background-color: #F9FAFB;
  }

  .form-control:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(12, 107, 88, 0.1);
  }

  
  .table-container {
    width: 100%;
  }

  .table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
  }

  .table th {
    background: var(--background-color);
    padding: 0.75rem 1rem;
    font-weight: 500;
    text-align: left;
    color: var(--text-color);
    font-size: 0.875rem;
    border-bottom: 1px solid var(--border-color);
  }

  .table td {
    padding: 0.75rem 1rem;
    color: var(--text-color);
    font-size: 0.875rem;
  }

  
  .btn {
    padding: 0.5rem 1rem;
    border-radius: 4px;
    font-size: 0.875rem;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .btn-add {
    background-color: var(--primary-color);
    color: white;
    width: 100%;
  }

  .btn-edit {
    background-color: var(--primary-color);
    color: white;
    min-width: 60px;
  }

  .btn-danger {
    background-color: var(--danger-color);
    color: white;
    min-width: 60px;
  }

  .btn-success {
    background-color: var(--success-color);
    color: white;
    min-width: 60px;
  }

  .action-buttons {
    display: flex;
    gap: 0.5rem;
  }

  .error-message {
    color: var(--danger-color);
    font-size: 0.75rem;
    margin-top: 0.25rem;
  }

  .badge {
    display: inline-flex;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .badge-success {
    background-color: #dcfce7;
    color: #166534;
  }

  .badge-danger {
    background-color: #fee2e2;
    color: #991b1b;
  }

  .btn-btn-outline-danger{
  color: #dc3545; /* Bootstrap's danger red */
  border: 1px solid #dc3545;
  background-color: transparent;
  padding: 0.375rem 0.75rem;
  font-size: 1rem;
  border-radius: 0.375rem;
  transition: 0.2s ease-in-out;
  cursor: pointer;
}

.btn-btn-outline-danger:hover {
  background-color: #dc3545;
  color: white;
}
  @media (max-width: 1024px) {
    .layout-container {
      grid-template-columns: 1fr;
    }
  }
</style>

<section class="content-main">
  <h2 class="content-title">Coupons</h2>

  <div class="card">
    <div class="card-body">
      <div class="layout-container">
        <!-- Form Section -->
        <div class="coupon-form">
          <form method="post" action="/admin/createCoupon" onsubmit="return validateForm()">
            <div class="form-group">
              <label for="coupon-name" class="form-label">Coupon Name</label>
              <input type="text" id="coupon-name" name="couponName" placeholder="Type here" class="form-control" />
              <div id="error-coupon-name" class="error-message"></div>
            </div>

            <div class="form-group">
              <label for="startingDate" class="form-label">Start Date</label>
              <input type="date" name="startDate" class="form-control" required id="startingDate" />
              <div id="error-start-date" class="error-message"></div>
            </div>

            <div class="form-group">
              <label for="expiringDate" class="form-label">End Date</label>
              <input type="date" name="endDate" class="form-control" id="expiringDate" required />
              <div id="error-end-date" class="error-message"></div>
            </div>

            <div class="form-group">
              <label for="offer-price" class="form-label">Offer Price</label>
              <input type="text" name="offerPrice" placeholder="Type here" class="form-control" />
              <div id="error-offer-price" class="error-message"></div>
            </div>

            <div class="form-group">
              <label for="minimum-price" class="form-label">Minimum Price</label>
              <input type="text" name="minimumPrice" placeholder="Type here" class="form-control" />
              <div id="error-minimum-price" class="error-message"></div>
            </div>

            <button class="btn btn-add" type="submit">Add Coupon</button>
            <div id="err-msg" class="error-message"></div>
          </form>
        </div>

        <!-- Table Section -->
        <div class="table-container">
          <table class="table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Created On</th>
                <th>Expire On</th>
                <th>Offer Price</th>
                <th>Minimum Price</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% for(let i = 0; i < coupons.length; i++) { %>
              <tr>
                <td><%= coupons[i].name %></td>
                <td><%= new Date(coupons[i].createdOn).toLocaleDateString('en-US') %></td>
                <td><%= new Date(coupons[i].expireOn).toLocaleDateString('en-US') %></td>
                <td><%= coupons[i].offerPrice %></td>
                <td><%= coupons[i].minimumPrice %></td>
                <td>
                  <% if(coupons[i].isList) { %>
                    <span class="badge badge-success">Listed</span>
                  <% } else { %>
                    <span class="badge badge-danger">Unlisted</span>
                  <% } %>
                </td>
                <td>
                  <div class="action-buttons">
                    <a href="/admin/editCoupon?id=<%= coupons[i]._id %>">
                      <button class="btn btn-edit">Edit</button>
                    </a>
                    <% if(coupons[i].isList) { %>
                      <button class="btn btn-danger" onclick="unlistCoupon('<%= coupons[i]._id %>')">Unlist</button>
                    <% } else { %>
                      <button class="btn btn-success" onclick="listCoupon('<%= coupons[i]._id %>')">List</button>
                    <% } %>
                    <button class="btn-btn-outline-danger" onclick="deleteCoupon('<%= coupons[i]._id %>')">Delete</button>
                  </div>
                </td>
              </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</section>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  function validateForm() {
    document.querySelectorAll(".error-message").forEach((element) => (element.innerHTML = ""));
    const sDate = document.getElementsByName("startDate")[0].value;
    const eDate = document.getElementsByName("endDate")[0].value;
    const sDateObj = new Date(sDate);
    const eDateObj = new Date(eDate);
    const todayDateObj = new Date();
    todayDateObj.setHours(0, 0, 0, 0);

    if (sDateObj > eDateObj) {
      document.getElementById("error-end-date").innerHTML = "End date should be after the start date";
      return false;
    }

    if (sDateObj <= todayDateObj) {
      document.getElementById("error-start-date").innerHTML = "Starting date should be greater than or equal to today's date";
      return false;
    }

    let name = document.getElementsByName("couponName")[0].value;
    const nameRegex = /^[A-Za-z0-9]{1,50}$/;

    if (!nameRegex.test(name)) {
      document.getElementById("error-coupon-name").innerHTML = "Coupon Name error";
      return false;
    }

    const offerPriceInput = document.getElementsByName("offerPrice")[0];
    const minimumPriceInput = document.getElementsByName("minimumPrice")[0];

    const offerPrice = offerPriceInput.value.trim() !== "" ? parseInt(offerPriceInput.value) : NaN;
    const minimumPrice = minimumPriceInput.value.trim() !== "" ? parseInt(minimumPriceInput.value) : NaN;

    if (isNaN(offerPrice) || isNaN(minimumPrice) || offerPrice >= minimumPrice) {
      document.getElementById("error-offer-price").innerHTML = "Offer Price must be less than Minimum Price";
      return false;
    }

    if (isNaN(offerPrice) || isNaN(minimumPrice)) {
      document.getElementById("error-offer-price").innerHTML = "Please enter numeric values for Offer Price and Minimum Price";
      return false;
    }

    return true;
  }

  function listCoupon(couponId) {
    Swal.fire({
      title: "Are you sure?",
      text: "Do you want to list this coupon?",
      icon: "question",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, list it!"
    }).then((result) => {
      if (result.isConfirmed) {
        $.ajax({
          url: `/admin/coupon/${couponId}/list`,
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          success: function (response) {
            if (response.status) {
              Swal.fire("Success", "Coupon listed successfully", "success").then(() => {
                window.location.reload();
              });
            } else {
              Swal.fire("Error", "Failed to list coupon", "error");
            }
          },
          error: function () {
            Swal.fire("Error", "An error occurred while listing the coupon", "error");
          }
        });
      }
    });
  }

  function unlistCoupon(couponId) {
    Swal.fire({
      title: "Are you sure?",
      text: "Do you want to unlist this coupon?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "Yes, unlist it!"
    }).then((result) => {
      if (result.isConfirmed) {
        $.ajax({
          url: `/admin/coupon/${couponId}/unlist`,
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          success: function (response) {
            if (response.status) {
              Swal.fire("Success", "Coupon unlisted successfully", "success").then(() => {
                window.location.reload();
              });
            } else {
              Swal.fire("Error", "Failed to unlist coupon", "error");
            }
          },
          error: function () {
            Swal.fire("Error", "An error occurred while unlisting the coupon", "error");
          }
        });
      }
    });
  }
  function deleteCoupon(couponId) {
    Swal.fire({
      title: "Are you sure?",
      text: "Do you want to Delete this coupon?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "Yes, Delete it!"
    }).then((result) => {
      if (result.isConfirmed) {
        $.ajax({
          url: `/admin/coupon/${couponId}/delete`,
          method: "DELETE",
          headers: { "Content-Type": "application/json" },
          success: function (response) {
            if (response.status) {
              Swal.fire("Success", "Coupon Deleted successfully", "success").then(() => {
                window.location.reload();
              });
            } else {
              Swal.fire("Error", "Failed to unlist coupon", "error");
            }
          },
          error: function () {
            Swal.fire("Error", "An error occurred while unlisting the coupon", "error");
          }
        });
      }
    });
  }


  function setDefaultStartDate() {
    const today = new Date();
    const year = today.getFullYear();
    let month = (today.getMonth() + 1).toString().padStart(2, "0");
    let day = today.getDate().toString().padStart(2, "0");
    document.getElementById("startingDate").value = `${year}-${month}-${day}`;
  }

  document.addEventListener("DOMContentLoaded", function() {
    setDefaultStartDate();
  });

  
</script>

<%- include("../../views/partials/admin/footer") %>